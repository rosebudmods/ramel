plugins {
    id "fabric-loom" version "1.6+"
    id "com.github.johnrengelman.shadow" version "8.1+"
    id "maven-publish"
    id "me.modmuss50.mod-publish-plugin" version "0.5.2"
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url = "https://maven.quiltmc.org/repository/release/" }
    maven { url = "https://maven.terraformersmc.com/releases/" }
    maven { url = "https://repo.sleeping.town/" }
}

configurations {
    shadow
    api.extendsFrom shadow
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.quilt_mappings}:intermediary-v2")
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

    implementation("folk.sisby:kaleido-config:${project.kaleido_config_version}")
    include("folk.sisby:kaleido-config:${project.kaleido_config_version}")

    modRuntimeOnly("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

publishMods {
    displayName = "ramel ${project.version}"
    file = remapJar.archiveFile
    changelog = rootProject.file("CHANGELOG.md").getText()
    type = STABLE

    modLoaders.add("quilt")
    modLoaders.add("fabric")

    dryRun = !providers.environmentVariable("MODRINTH_TOKEN").isPresent()
            || !providers.environmentVariable("CURSEFORGE_TOKEN").isPresent()
            || property("pub.should_publish") == "false"
    dryRun = false

    var mcVersions = [project.minecraft_version]
    mcVersions.addAll(property("pub.additional_versions").toString().split(" ").findAll { !it.empty })

    modrinth {
        projectId = "4Uw92C2y"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        mcVersions.forEach(minecraftVersions::add)

        requires("fabric-api")
        optional("modmenu")
    }

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = "877074"
        mcVersions.forEach(minecraftVersions::add)

        clientRequired = true
        serverRequired = false

        requires("fabric-api")
        optional("modmenu")
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
