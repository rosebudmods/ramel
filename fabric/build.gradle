plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'me.modmuss50.mod-publish-plugin'
}
def platformName = "Fabric"

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.parchment_minecraft_version}:${project.parchment_mappings_version}@zip")
    }
    compileOnly(project(':common'))

    modImplementation("net.fabricmc:fabric-loader:${project.fabric_loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    modCompileOnly("com.terraformersmc:modmenu:${project.modmenu_version}")
    modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}")

    implementation("folk.sisby:kaleido-config:${project.kaleido_config_version}")
    include("folk.sisby:kaleido-config:${project.kaleido_config_version}")
}

publishMods {
    displayName = "[${platformName}] ${project.version}"
    version = "${project.version}-${project.name}"
    file = remapJar.archiveFile
    additionalFiles.from(sourcesJar.archiveFile)
    changelog = rootProject.file("CHANGELOG.md").getText()
    type = STABLE

    modLoaders.add("fabric")
    modLoaders.add("quilt")

    dryRun = !providers.environmentVariable("MODRINTH_TOKEN").isPresent()
            || !providers.environmentVariable("CURSEFORGE_TOKEN").isPresent()
            || property("pub.should_publish") != "true"

    var mcVersions = [project.minecraft_version]
    mcVersions.addAll(property("pub.additional_versions").toString().split(" ").findAll { !it.empty })

    modrinth {
        projectId = project.property('pub.modrinth_id')
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.addAll(mcVersions)

        requires("P7dR8mSH") // fabric-api
        optional("mOgUt4GM") // modmenu
    }

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = project.property('pub.curseforge_id')
        minecraftVersions.addAll(mcVersions)

        clientRequired = true
        serverRequired = true

        requires("fabric-api") // fabric-api
        optional("modmenu") // modmenu
    }
}

loom {
    mods {
        "${mod_id}" {
            sourceSet("main")
            project(":common").sourceSets.main
        }
    }

    mixin {
        useLegacyMixinAp = false
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")

            if (rootProject.hasProperty('mc_uuid')) {
                programArgs("--uuid", rootProject.mc_uuid)
            }

            if (rootProject.hasProperty('mc_username')) {
                programArgs("--username", rootProject.mc_username)
            }

            if (rootProject.hasProperty('mc_java_agent_path')) {
                vmArg("-javaagent:${rootProject.mc_java_agent_path}")
            }
        }

        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run/server")

            if (rootProject.hasProperty('mc_java_agent_path')) {
                vmArg("-javaagent:${rootProject.mc_java_agent_path}")
            }
        }
    }
}

tasks.named("compileJava", JavaCompile) {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("javadoc", Javadoc) {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}
