plugins {
    id 'net.neoforged.moddev'
    id 'me.modmuss50.mod-publish-plugin'
}

def platformName = "NeoForge"

dependencies {
    compileOnly(project(':common'))
    implementation("folk.sisby:kaleido-config:${project.kaleido_config_version}")
    additionalRuntimeClasspath("folk.sisby:kaleido-config:${project.kaleido_config_version}") // needed because kaleido does not have a neoforge.mods.toml file
    jarJar("folk.sisby:kaleido-config:${project.kaleido_config_version}") {
        version {
            strictly "[${project.kaleido_config_version},)"
            prefer "${project.kaleido_config_version}"
        }
    }
}

publishMods {
    displayName = "[${platformName}] ${project.version}"
    version = "${project.version}-${project.name}"
    file = jar.archiveFile
    additionalFiles.from(sourcesJar.archiveFile)
    changelog = rootProject.file("CHANGELOG.md").getText()
    type = STABLE

    modLoaders.add("neoforge")

    dryRun = !providers.environmentVariable("MODRINTH_TOKEN").isPresent()
            || !providers.environmentVariable("CURSEFORGE_TOKEN").isPresent()
            || property("pub.should_publish") != "true"

    var mcVersions = [project.minecraft_version]
    mcVersions.addAll(property("pub.additional_versions").toString().split(" ").findAll { !it.empty })

    modrinth {
        projectId = project.property('pub.modrinth_id')
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.addAll(mcVersions)
    }

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = project.property('pub.curseforge_id')
        minecraftVersions.addAll(mcVersions)

        clientRequired = true
        serverRequired = true
    }
}

neoForge {
    version = project.neoforge_version

    parchment {
        minecraftVersion = project.parchment_minecraft_version
        mappingsVersion = project.parchment_mappings_version
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
            sourceSet project(":common").sourceSets.main
        }
    }

    runs {
        configureEach {
            logLevel = org.slf4j.event.Level.DEBUG

            systemProperty 'forge.logging.markers', 'REGISTRIES'

            gameDirectory = project.file('run')
        }
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

            if (rootProject.hasProperty('mc_uuid')) {
                programArgument "--uuid=${rootProject.mc_uuid}"
            }

            if (rootProject.hasProperty('mc_username')) {
                programArgument "--username=${rootProject.mc_username}"
            }

            if (rootProject.hasProperty('mc_java_agent_path')) {
                jvmArgument "-javaagent:${rootProject.mc_java_agent_path}"
            }
        }

        server {
            server()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            programArgument '--nogui'
        }
    }
}

tasks.named("compileJava", JavaCompile) {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("javadoc", Javadoc) {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}
